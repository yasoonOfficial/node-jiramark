/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2019, Joyent, Inc.
 */

/*
 * jiramark: JIRA markup grammar
 */
JIRA {
  Document = blocks tblock?

  blocks = blankl* (tblock blankl*)*

  tblock
   = block<empty>
   | paragraph

  iblock<no>
   = block<no>
   | words<no>

  block<no>
   = heading space+ words<no> -- header
   | readUntil<"noformat"> -- noformat
   | readUntil<"code"> -- code
   | namedBlock<"panel"> -- panel
   | namedBlock<"quote"> -- quote
   | bq space* words<no> -- blockquote
   | (bullet (space* ~bullet iblock<no> (nl? | &no))+)+ -- list
   | ~no row+ -- table

  paragraph = paraLine+

  paraLine
   = simplestr (&paraEnd | nl)
   | words<empty> (&paraEnd | nl)

  paraEnd
   = nl? heading -- headStart
   | nl? blockStart -- blockStart
   | nl? bq -- bqStart
   | nl bullet -- listStart
   | nl space* nl -- blankStart
   | nl tablesep -- tableStart

  readUntil<nm> = space* "{" nm options? "}" upToThreeNl readUntilInner<nm>* "{" nm "}"
  namedBlock<nm> = space* "{" nm options? "}" nl* (~("{" nm) tblock nl*)* "{" nm "}"
  upToThreeNl = nl? nl? nl?

  readUntilInner<nm>
   = nonlcurlies
   | ~("{" nm) any

  /*
   * The noncurly rule is:
   *
   *     nonlcurly = ~"{" any
   *
   * Since our alternative parser doesn't convert the negative lookaheads into
   * negated character classes, we don't write it out in this .ohm file, but
   * put it directly into the base definitions as a regular expression.
   */
  nonlcurlies = nonlcurly+

  options = ":" (~"}" ident)*

  heading = "h" "1".."6" "."
  bq = "bq."

  bullet = space* point (bullet | space)
  point (a bullet point) = "#" | "-" | "*"

  row = cell+ rowEnd
  rowEnd
   = tablesep? nl &tablesep -- morerows
   | tablesep &(nl ~tablesep) -- lastrow1
   | &(nl nl) -- lastrow2
  cell = tablesep iblock<"|"> (~("|" | rowEnd) nl? iblock<"|">)*
  tablesep = "|"+

  /*
   * Handling formatting characters in JIRA markup is a bit messy, since the
   * characters themselves may wind up being used as literal characters inside
   * the markup. To handle this, we pass the set of currently opened format
   * characters as a parameter so that when we see them we don't interpret them
   * as opening the format again.
   */
  words<no>
   = (~no formatted<empty>)+ (~no markupWord<empty>)* -- type1
   | (~no markupWord<empty>)+ -- type2

  markupWord<excl>
   = "[~" (~"]" ident)+ "]" -- user
   | "[" markupWordUntil<"|", excl>? space* uri space* "]" -- link
   | "[" markupWordUntil<"|", excl>? "^" space* urichars space* "]" -- attachment
   | "!" (~"!" filechar)+ ("|" (~"!" ident)+)? "!"  -- embed
   | "{color" options? "}" markupWordUntil<"{color}", excl> -- color
   | "{{" markupWordUntil<"}}", excl> -- monospace
   | (space | ~formchar ~char punct) ~excl formatted<excl>+ -- formatted
   | bareurl
   | ident

  formatted<excl>
   = "??" ~space markupWordUntil<"??", excl> -- citation
   | "*" ~space markupWordUntil<"*", excl> -- strong
   | "_" ~space markupWordUntil<"_", excl> -- emphasis
   | "~" ~space markupWordUntil<"~", excl> -- subscript
   | "^" ~space markupWordUntil<"^", excl> -- superscript
   | "-" ~space markupWordUntil<"-", excl> -- deleted
   | "+" ~space markupWordUntil<"+", excl> -- inserted

  markupWordUntil<stop, excl>
   = ~stop formatted<(stop | excl)> markupWordOne<stop, excl>* stop -- multiple
   | ~stop markupWordOne<stop, excl>+ stop -- simple

  markupWordOne<stop, excl>
   = ~stop markupWord<(stop | excl)>
   | formchar alnum -- formlit

  /*
   * When writing a URL directly in the text, it is only interpreted up to
   * certain punctuation (the urlend characters), followed by a non-URL
   * character (usually whitespace), which helps for placing it at the end of
   * sentences.
   */
  bareurl (a URL) = scheme "://" (~urlend urichar)+
  urlend = urlexcl* ~urichar
  urlexcl = "." | ")" | "!" | "," | "'"

  space := " " | "\t" | "\u00a0"

  nl (a newline) = "\r\n" | "\n" | "\r"
  blankl = space* nl

  blockStart = "{" ("quote" | "panel" | "noformat" | "code")

  formchar (a format character) = "*" | "_" | "~" | "-" | "+" | "^" | "??"
  punct = "\u0021".."\u002f" | "\u003a".."\u0040" | "\u005b".."\u0060" | "\u007b".."\u007E"
  escapes = formchar | "[" | "]" | "{" | "}" | "\\"

  ident = ~blockStart (char | punct | ~nl any)
  char = ascchar | space | entchar | escchar
  entchar (an HTML entity) = "&" "#"? alnum+ ";"
  escchar (an escape sequence) = "\\" escapes
  ascchar (an ASCII alphanumeric character) = alnum+

  simplestr = (ascchar | entchar | space | ":" | "." | "'" | ",")+

  uri (a URI)
   = scheme "://" urichars -- complete
   | "//" urichars -- relative
   | "#" urichars -- fragment
  urichars = urichar+
  urichar = alnum | "!" | "\u0023".."\u002F" | ":" | ";" | "=" | "?" | "@" | "_" | "~"
  filechar = urichar | " "
  scheme (a URI scheme)
   = "http" "s"? -- hypertext
   | "ftp" "s"? -- filetransfer
   | "file" -- localfile
   | "irc" -- chat

  /*
   * This is a dirty, dirty hack. Since we can't do a negative lookahead for an
   * empty string, we need a character that shouldn't show up in the source
   * text. We use one of the private high surrogate pair values.
   */
  empty = "\uDBFF"
}
